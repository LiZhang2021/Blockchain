\documentclass[11pt,a4paper]{article}
\usepackage{algorithm}
\usepackage{algorithmicx}
\usepackage{algpseudocode}
\usepackage{CJK,amsmath,amssymb,color,graphicx}
\usepackage[top=1in,bottom=1in,left=1.1in,right=1in]{geometry}
%------------------------------------------------------------------------%
\makeatletter
\newenvironment{breakablealgorithm}
{% \begin{breakablealgorithm}
	\begin{center}
		\refstepcounter{algorithm}% New algorithm
		\hrule height.8pt depth0pt \kern2pt% \@fs@pre for \@fs@ruled
		\renewcommand{\caption}[2][\relax]{% Make a new \caption
			{\raggedright\textbf{\ALG@name~\thealgorithm} ##2\par}%
			\ifx\relax##1\relax % #1 is \relax
			\addcontentsline{loa}{algorithm}{\protect\numberline{\thealgorithm}##2}%
			\else % #1 is not \relax
			\addcontentsline{loa}{algorithm}{\protect\numberline{\thealgorithm}##1}%
			\fi
			\kern2pt\hrule\kern2pt
		}
	}{% \end{breakablealgorithm}
		\kern2pt\hrule\relax% \@fs@post for \@fs@ruled
	\end{center}
}
\makeatother

\begin{document}
\begin{CJK*}{GBK}{song}

\title{Consensus Algorithms in Wireless Blockchain System}
\author{}
\date{}
\maketitle

\section{Consensus Algorithm in Each Round}

\newpage

\begin{breakablealgorithm}
	%\textsl{}\setstretch{1.8}
	\renewcommand{\algorithmicrequire}{\textbf{Input:}}
	\renewcommand{\algorithmicensure}{\textbf{Output:}}
	\caption{The SWIB Blockchain Consensus Protocol}
	\label{alg1}
\begin{algorithmic}[1]
    \While {true}
        \State \textcolor{cyan}{//** Iteration for round $r$}
		\State \textcolor{blue}{$\rhd$ Initialization}:
        \State \textcolor{cyan}{//** Broadcast transactions}
        \For {$j < K$ slots}
            \State $BroadcastMSG()$
            \State $j = j + 1$
        \EndFor
        \State \textcolor{blue}{$\rhd$ Consensus Process}:
        \State $Rds^{r} = GenerateRandomValue(r, B_{H}^{r-1}, sig_{full}^{r-1})$
        \State $result, proof = \text{Block Proposer Election}(sk, Rdm^{r})$ \hspace{1cm}\textcolor{red}{$\rhd$ Block Proposer Election}
        \If {$result == True$}   \hspace{1cm}\textcolor{red}{$\rhd$ Block Generation}
            \State $B^{r} = \text{Generate Block}(B^{r-1}, Txs)$
            \State $sig_{v}^{r} = Sign(B_{H}^{r})$
            %\State {$broadcast(B^{r}, proof, sig_{v}^{r})$ with probability $p_{max}$ and transmission power $P_{max}$}
        %\Else  \hfill\textcolor{red}{$\rhd$ As Ordinary Nodes}
        \EndIf
        \While {$!finalized$}   \hspace{1cm}\textcolor{red}{$\rhd$ Block Verification and Finalization}
            \State \textcolor{cyan}{//** Broadcast signatures}
            \State $BroadcastMSG()$
            \State $B^r, proof, sig_{u}^{r},sig_{full}^{r} = RcvMSG()$
            \State \textcolor{cyan}{//**Check the Finalization of new block}
            \If {$isValid(sig_{full}^{r})$}
                \State $AddSig(B^{r}, sig_{full}^{r})$
                \State $Append(BC, B^{r})$
                \State $finalized = True$
            \ElsIf {$Count(Sigs^{r}) \geq \lceil\frac{N+1}{2}\rceil$}
                \State $sig_{full}^{r} = \text{Recover Full Signature}(Sigs^{r})$
                \State $broadcast(sig_{full}^{r})$ with probability $p_{max}$ and power $P_{max}$
                \State $AddSig(B^{r}, sig_{full}^{r})$
                \State $Append(BC, B^{r})$
                \State $finalized = True$
            \ElsIf {$sig_{u}^{r} \notin Signs^{r}$}
                \State $\text{Append Signature}(Sigs^{r}, sig_{u}^{r})$
            \Else
                \State \textcolor{cyan}{//**Check the validation of new block}
                \If {$isValid(B^r, pk_{BP}, proof, Rdm^{r})$}
                    \State $sig_{v}^{r} = \text{Generate Signature}(B_{H}^{r}, sk_{v})$
                \EndIf
            \EndIf
        \EndWhile
        \State $r = r + 1$
    \EndWhile
	\end{algorithmic}
\end{breakablealgorithm}

\newpage


\begin{breakablealgorithm}
	%\textsl{}\setstretch{1.8}
	\renewcommand{\algorithmicrequire}{\textbf{Input:}}
	\renewcommand{\algorithmicensure}{\textbf{Output:}}
	\caption{BroadcastMSG subroutine}
	\label{alg1}
	\begin{algorithmic}[1]
        \If {$v \text{ decided to send a transaction based on }p_v$}
            \State $broadcast(MSGs)\text{ with power }P_t$
        \Else
            \If {channel is idle}
                \State \textcolor{cyan}{//** Count idle slots within $T_v$}
                \State $e_v = e_v + 1$
            \Else
                \State $\text{Receive a message from others}$
            \EndIf
        \EndIf
        \State \textcolor{cyan}{//**maintain the estimate of adversary time window}
        \State $count_v = count_v + 1$
        \If {$count_v > T_v$}
            \State {$count_v = 1$}
            \If {$e_v == 0$}
                \State {$p_v = p_v/(1+\gamma)$}
                \State {$T_v = T_v + 2$}
            \ElsIf {$e_v >= 1$}
                \State {$p_v = p_v*(1+\gamma)$}
                \State {$T_v = T_v - 1$}
            \EndIf
        \EndIf
	\end{algorithmic}
\end{breakablealgorithm}


\begin{breakablealgorithm}
	%\textsl{}\setstretch{1.8}
	\renewcommand{\algorithmicrequire}{\textbf{Input:}}
	\renewcommand{\algorithmicensure}{\textbf{Output:}}
	\caption{The SWIB Blockchain Consensus Protocol for each node $v$}
	\label{alg1}
	\begin{algorithmic}[1]
        \While {true}
            \State \textcolor{green}{//** Iteration for round $r$}
    		\State \textcolor{blue}{$\rhd$ Initialization}:
            \For {$j < K$ slots}
                \State $BroadcastMSG()$
                \State $j = j + 1$
            \EndFor
            \State $Rds^{r} = GenerateRandomValue(r, B_{H}^{r-1}, sig_{full}^{r-1})$
            \State \textcolor{blue}{$\rhd$ Consensus Process}:
            \State $\text{Block Proposer Election}();$
            \State $\text{Block Verification}();$
            \State $\text{Block Finalization}();$
            \State $r = r + 1$
        \EndWhile
	\end{algorithmic}
\end{breakablealgorithm}

\newpage
\begin{breakablealgorithm}
	%\textsl{}\setstretch{1.8}
	\renewcommand{\algorithmicrequire}{\textbf{Input:}}
	\renewcommand{\algorithmicensure}{\textbf{Output:}}
	\caption{Block Verification for each node $v$}
	\label{alg1}
\begin{algorithmic}[1]
    \State $B^{r}, proof = RcvMSG()$
    \State \textcolor{green}{//**Check the validation of new block}
        \State $result_v = \text{Verify Block Proposer}(pk_{BP}, proof, Rdm^{r})$
        \If {$result_v == True$}
            \If {$H_{pre}^r == B_H^{r-1}$}
                \If {isvalid(Txs)}
                    \State $sig_{v}^{r} = \text{Generate Signature}(B_{H}^{r}, sk_{v})$
                \EndIf
            \EndIf
        \EndIf
	\end{algorithmic}
\end{breakablealgorithm}

\newpage
\begin{breakablealgorithm}
	%\textsl{}\setstretch{1.8}
	\renewcommand{\algorithmicrequire}{\textbf{Input:}}
	\renewcommand{\algorithmicensure}{\textbf{Output:}}
	\caption{Block Finalization for each node $v$}
	\label{alg1}
\begin{algorithmic}[1]
    \While {$!finalized$}
        \State $BroadcastMSG()$
        \State $sig_{u}^{r},sig_{full}^{r} = RcvMSG()$
        \State \textcolor{green}{//**Check the Finalization of new block}
        \If {$isValid(sig_{full}^{r})$}
            \State $AddSig(B^{r}, sig_{full}^{r})$
            \State $Append(BC, B^{r})$
            \State $finalized = True$
        \ElsIf {$Count(Sigs^{r}) \geq \lceil\frac{N+1}{2}\rceil$}
            \State $sig_{full}^{r} = \text{Recover Full Signature}(Sigs^{r})$
            \State $broadcast(sig_{full}^{r})$ with probability $p_{max}$ and power $P_{max}$
            \State $AddSig(B^{r}, sig_{full}^{r})$
            \State $Append(BC, B^{r})$
            \State $finalized = True$
        \ElsIf {$sig_{u}^{r} \notin Signs^{r}$}
            \State $\text{Append Signature}(Sigs^{r}, sig_{u}^{r})$
        \EndIf
    \EndWhile
	\end{algorithmic}
\end{breakablealgorithm}


\newpage
\begin{breakablealgorithm}
	%\textsl{}\setstretch{1.8}
	\renewcommand{\algorithmicrequire}{\textbf{Input:}}
	\renewcommand{\algorithmicensure}{\textbf{Output:}}
	\caption{Stable Wireless Blockchain Protocol}
	\label{alg1}
	\begin{algorithmic}[1]
		\State \textcolor{blue}{$\rhd$ Initialization}:
        \State $Sortition(PKs^{r}, S^{r})$
        \State $Rds^{r} = GenerateRandomness(r, B_{hash}^{r-1}, sig_{final}^{r})$
		\State \textcolor{blue}{$\rhd$ Leader Election and Block Proposal}:
        \State $result = BlockProposerSelection(sk, Rds^{r})$
            \If {$result == True$}   \hfill\textcolor{red}{$\rhd$ As Block Proposer}
            \State $B^{r} = GenerateBlock(B^{r-1}, Txs)$
            \State $sig_{partial}^{r} = Sign(B_{hash}^{r})$
            \State $broadcast(B^{r}, sig_{partial}^{r})$ with probability $p$
            \Else  \hfill\textcolor{red}{$\rhd$ As Ordinary Nodes}
            \State Waiting to receive new Block
            \EndIf
        \State \textcolor{blue}{$\rhd$ Block Verification and Finalization}:
        \While {$!finalized$} \hfill\textcolor{red}{$\rhd$ All Consensus Nodes}
            \State $(B^{r}, Signs^{r}, sig_{full}^{r}, Tx) = RcvMSG()$
                \State \textcolor{green}{//**Check the validation of new block}
                \If {$isValid(B^{r})$ and $VerifyBlockProposer(pk_{BP}, Rds^{r})$}
                    \State $sig_{v}^{r} = GenerateSignature(B_{hash}^{r}, sk_{v})$
                \EndIf
                \If {$isValid(sig_{full}^{r})$}
                    \State $\sigma_{F}^{r} = sig_{full}^{r}$
                    \State $broadcast(\sigma_{F}^{r})$ with probability $p$
                    \State $Append(B^{r}, \sigma_{F}^{r})$
                    \State $finalized = True$
                \ElsIf {$Count(Signs^{r}) >= \lceil\frac{N}{2}\rceil$}
                    \State $\sigma_{F}^{r} = RecoverFullSignature(Signs^{r})$
                    \State $broadcast(\sigma_{F}^{r})$ with probability $p$
                    \State $Append(B^{r}, \sigma_{F}^{r})$
                    \State $finalized = True$
                \ElsIf {$sig_{u}^{r} \notin Signs^{r}$}
                    \State $Signs^{r} = AppendSignature(sig_{u}^{r})$
                \ElsIf {$v$ did not broadcast its partial signature}
                    \State $broadcast(sig_{v}^{r})$ with probability $p$
                \Else
                    \State $broadcast(Tx)$ with probability $p$
                \EndIf
            \State $count = count + 1$
            \If {$count > T$}
                \State $count = 1$
                \If {Received $T$ consecutive transactions in the past $T$ rounds}
                    \State $p = p * (1+\delta)^{-1}$
                    \State $T = T + 2$
                \EndIf
            \EndIf
        \EndWhile
        \newpage
        \Function{RecNewBlock}{$m_B, \sigma_v$}
            \If{$\sigma_v \notin sigShares$}
                \State $sigShares = AppendSignature(\sigma_v)$
            \EndIf
            \If{$Count(sigShares) > K$}
                \State $FinalSig = RecoverFinalSig(sigShares)$
            \Else
                \State $FinalSig = null$
            \EndIf
            \State \Return $sigShares, FinalSig, B_v^{new}$
        \EndFunction
        \Function{AppendSignature}{$\sigma_v$}
            \If{$\sigma_v \notin sigShares$}
                \State $sigShares \leftarrow sigShares + \sigma_v)$
            \EndIf
            \State \Return $sigShares$
        \EndFunction
	\end{algorithmic}
\end{breakablealgorithm}

\end{CJK*}
\end{document}
